nagios-api
==========
:doctype: manpage


NAME
----
nagios-api - presents a REST-like JSON interface to Nagios


SYNOPSIS
--------
*nagios-api* ['OPTIONS']


DESCRIPTION
-----------
This program provides a simple REST-like interface to Nagios. Run this
on your Nagios host and then sit back and enjoy a much easier, more
straightforward way to accomplish things with Nagios. You can use the
bundled nagios-cli, but you may find it easier to write your own system
for interfacing with the API.


USAGE
-----
Usage is pretty easy:

  nagios-api -p 8080 -c /var/lib/nagios3/rw/nagios.cmd \
             -s /var/cache/nagios3/status.dat -l /var/log/nagios3/nagios.log

You must at least provide the status file options. If you don't provide
the other options, then we will disable that functionality and error to
clients who request it.


HTTP USAGE
----------
The server speaks JSON. You can either GET data from it or POST data to
it and take an action. It's pretty straightforward, here's an idea of
what you can do from the command line:

  curl http://localhost:6315/state

That calls the `state` method and returns the JSON result.

  curl -d '{"host": "web01", "duration": 600}' \
      http://localhost:6315/schedule_downtime

This POSTs the given JSON object to the `schedule_downtime` method. You
will note that all objects returned follow a predictable format:

  {"content": <object>, "result": <bool>}

The `result` field is always `true` or `false`, allowing you to
determine at a glance if the command succeeded. The `content` field may
be any valid JavaScript object: an int, string, null, bool, hash, list,
etc etc. What is returned depends on the method being called.


NAGIOS-CLI USAGE
----------------
Once your API server is up and running you can access it through the
included nagios-cli script. Here are some examples:

  nagios-cli state

Dump a very large, raw JSON output. This is hard to read, so I recommend
that you do this instead:

  nagios-cli state | python -mjson.tool

That should give you an output that shows all of the relevant
information to construct a status display. Hosts, services, comments,
downtimes, and state information for everything. You can manipulate this
information with several commands:

  nagios-cli schedule_downtime host=web01 duration=600

This schedules a 10 minute downtime for the host web01. You can do the
same with a service:

  nagios-cli schedule_downtime host=web01 service=Apache duration=600 \
             author=mark "comment=Some comment to make."

The syntax is kind of hard if you want to put spaces in your comments,
please note that this CLI script is extremely preliminary. ;)

Cancelling downtime can be done the same:

  nagios-cli cancel_downtime host=web01

That removes any downtimes that are on the host. Note that you will need
to also remove service downtimes separately. The return code will let
you know how things went. Also note that *you can't cancel a downtime
until Nagios has acknowledged it being created*!

What does this mean? If you have a script that creates a downtime, then
does some work and finally cancels the downtime -- if that work is
too fast, we will not be able to cancel the downtime since it hasn't
actually been created yet. Nagios is an old and slow system and we don't
know the ID of the downtimes we create until it updates the status file
-- which could be tens of seconds or longer.

If the log file is enabled, you can get the last 1000 items in the
Nagios log like this:

  nagios-cli log

For now that output is an unparsed list. In the future I want to
transform this into a logical system that tells you what is happening
in a way that is easy to use so we don't have to duplicate Nagios log
parsing code in every project.


OPTIONS
-------
*-p, --port*='PORT'::
    Listen on port 'PORT' for HTTP requests.

*-c, --command-file*='FILE'::
    Use 'FILE' to write commands to Nagios. This is where external
    commands are sent. If your Nagios installation does not allow
    external commands, do not set this option.

*-s, --status-file*='FILE'::
    Set 'FILE' to the status file where Nagios stores its status
    information. This is where we learn about the state of the world and
    is the only required parameter.

*-l, --log-file*='FILE'::
    Point 'FILE' to the location of Nagios's log file if you want to
    allow people to subscribe to it.

*-o, --allow-origin*='ORIGIN'::
    Modern web browsers implement the Cross-Origin Resource Sharing
    specification from W3C. This spec allows you to host your
    JavaScript/HTML on one host and have it access an endpoint on a
    different service. This requires setting a header on the endpoint,
    which this option allows you to do.
+
    You can simply set this header to `*` and not worry about it
    if you want to allow all access. For more information see the
    http://www.w3.org/TR/cors/[CORS specification].

*-q, --quiet*::
    If present, we will only print warning/critical messages. Useful if
    you are running this in the background.


API
---
TODO: document the API.


AUTHOR
------
Written by Mark Smith <mark@qq.is> while under the employ of Bump
Technologies, Inc.


COPYING
-------
See the LICENSE file for licensing information.
