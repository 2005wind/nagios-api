#!/usr/bin/python

'''nagios-api - a REST-like, JSON API for Nagios

This provides a simple REST interface to Nagios3. See the README for
more information about this software.

Copyright 2011 by Bump Technologies, Inc and other authors and
contributors. See the LICENSE file for full licensing information.

'''


import datetime
import os
import re
import sys
import time
import pprint
from optparse import OptionParser
from diesel import Application, Loop, Service, log as glog, sleep
from diesel.util.lock import synchronized
from diesel.protocols import http
from json import loads, dumps
from nagios import Nagios


LOG = None
CMDFILE = None
URL_REGEX = re.compile(r'^/(\w+)(?:/(\d+)?)?$')
NAGIOS = None
NLOG = []
NLOGLINES = 0


def _send_json(req, success, content):
    '''Internal JSON sender.

    '''
    headers = http.HttpHeaders()
    out = dumps({ 'success': success, 'content': content })
    headers.add('Content-Length', len(out))
    headers.add('Content-Type', 'application/json')
    return http.http_response(req, 200, headers, out)


def json_error(req, msg):
    '''Return an error message to the caller.

    '''
    return _send_json(req, False, msg)


def json_response(req, msg):
    '''Return an error message to the caller.

    '''
    return _send_json(req, True, msg)


def http_state(req, objid, reqobj):
    '''Get a host->service mapping and return the basic state. This is
    the method to use to have status scripts or web interfaces that
    contain basic overview information.

    This should return everything you need to show the status of the
    world.

    '''
    global NAGIOS
    if objid is not None:
        return json_error(req, 'Unexpected object ID.')
    return json_response(req, NAGIOS.for_json())


def http_log(req, objid, reqobj):
    '''Return the recent Nagios log entries. This is useful if you just
    want to see what has happened recently. See the subscribe method if
    you want to be notified when new log lines are added.

    '''
    global NLOG
    if objid is not None:
        return json_error(req, 'Unexpected object ID.')
    return json_response(req, NLOG)


def http_schedule_downtime(req, objid, reqobj):
    '''Given a service or host, schedule downtime for it. The main mode
    for this API is to schedule a hard downtime that starts now and ends
    after so many seconds.

    '''
    global NAGIOS
    if objid is not None:
        return json_error(req, 'Unexpected object ID.')

    host = reqobj['host'] if 'host' in reqobj else None
    service = reqobj['service'] if 'service' in reqobj else None
    author = reqobj['author'] if 'author' in reqobj else 'nagios-api'
    comment = reqobj['comment'] if 'comment' in reqobj else 'schedule downtime'
    try:
        dur = int(reqobj['duration']) if 'duration' in reqobj else 0
    except ValueError:
        dur = 0

    obj = NAGIOS.host_or_service(host, service)
    if obj is None:
        return json_error(req, 'Host or service not found.')
    if dur < 60 or dur > 86400 * 7:  # Upper limit?
        return json_error(req, 'Downtime must be between 60 seconds and a week.')

    now = int(time.time())
    if obj.service is not None:
        if not send_nagios_command('SCHEDULE_SVC_DOWNTIME', host, service, now,
                                   now+dur, 1, 0, 0, author, comment):
            return json_error(req, 'Failed sending command to Nagios.')
    else:
        if not send_nagios_command('SCHEDULE_HOST_DOWNTIME', host, now, now+dur,
                                   1, 0, 0, author, comment):
            return json_error(req, 'Failed sending command to Nagios.')
    return json_response(req, 'scheduled')


def http_cancel_downtime(req, objid, reqobj):
    '''Given a downtime_id in objid, cancel that downtime. Alternately,
    this method will expect a host and/or service parameter and use that
    to cancel any matching downtimes.

    '''
    global NAGIOS

    def cancel_downtime(obj):
        if obj.service is not None:
            return send_nagios_command('DEL_SVC_DOWNTIME', dt.downtime_id)
        else:
            return send_nagios_command('DEL_HOST_DOWNTIME', dt.downtime_id)

    dts = []
    if objid is not None:
        if objid not in NAGIOS.downtimes:
            return json_error(req, 'Downtime ID does not seem valid.')
        dts = [NAGIOS.downtimes[objid]]
    else:
        host = reqobj['host'] if 'host' in reqobj else None
        service = reqobj['service'] if 'service' in reqobj else None
        obj = NAGIOS.host_or_service(host, service)
        if obj is None:
            return json_error(req, 'Failed to get host or service for downtime.')
        dts = obj.downtimes.values()

    res = None
    for dt in dts:
        if res is None:
            res = True  # So we know if we found any.
        res = cancel_downtime(dt) and res        

    if res is not None:
        if res:
            return json_response(req, 'cancelled')
        else:
            return json_error(req, 'One or more cancels failed.  Some may have succeeded.')
    else:
        return json_response(req, 'none found')


def http_handler(req):
    '''Handle an incoming HTTP request.

    '''
    # All requests should follow this very simple format.
    global URL_REGEX
    res = URL_REGEX.match(req.url)
    if res is None:
        return json_error(req, 'Invalid request URI')
    verb, objid = res.group(1), res.group(2)
    objid = int(objid) if objid else None

    # If it's a POST, try to extract a JSON object from the body.
    try:
        reqobj = loads(req.body) if req.method == 'POST' else None
    except ValueError:
        return json_error(req, 'Invalid JSON body')
    if reqobj is not None and type(reqobj) is not dict:
        return json_error(req, 'JSON body must be a dict')

    # Dispatch table goes here
    dispatch = {
        'GET': {
            'state': http_state,
            'log': http_log,
        },
        'POST': {
            'schedule_downtime': http_schedule_downtime,
            'cancel_downtime': http_cancel_downtime,
        }
    }

    if req.method not in dispatch:
        return json_error(req, 'Method %s not supported' % req.method)
    if verb not in dispatch[req.method]:
        return json_error(req, 'Verb %s (method %s) not supported' % (verb, req.method))
    return dispatch[req.method][verb](req, objid, reqobj)


def send_nagios_command(*args):
    '''Send a simple command to our local Nagios server.

    '''
    global CMDFILE
    if len(args) < 2:
        return False
    arg = '[%d] ' % int(time.time()) + ';'.join(str(j) for j in args)
    with synchronized():
        info('Sending command: %s' % arg)
        with open(CMDFILE, 'w') as pipe:
            pipe.write(arg + '\n')
    return True


def read_status(statusfile):
    '''Monitor the Nagios status file and update our global data store
    with the data as it changes.

    '''
    global NAGIOS
    mtime = None
    while True:
        stat = os.stat(statusfile)
        if mtime is None or stat.st_mtime > mtime:
            NAGIOS = Nagios(statusfile)
            mtime = stat.st_mtime
        sleep(1)


def read_log(logfile):
    '''This function reads the Nagios log file and parses events. This
    allows us to provide a pubsub style interface so people can get
    real-time updates from the Nagios system.

    '''
    global NLOG, NLOGLINES
    f = open(logfile, 'r')
    while True:
        loc = f.tell()
        line = f.readline()
        if not line:
            sleep(1)
            f.seek(loc)
        else:
            NLOGLINES += 1
            NLOG.append(line.strip())
            NLOG = NLOG[-1000:]  # Keep the most recent 1k lines.
    f.close()  # Useless?


def main(argv):
    '''A simple REST API for Nagios3.

    '''
    global LOG, CMDFILE
    app = Application()

    parser = OptionParser(description='Give Nagios a REST API.')
    parser.add_option('-s', '--status-file', dest='statusfile', metavar='FILE',
            default='/var/cache/nagios3/status.dat', help='The file that contains '
            'the Nagios status.')
    parser.add_option('-c', '--command-file', dest='commandfile', metavar='FILE',
            default='/var/lib/nagios3/rw/nagios.cmd', help='The file to write '
            'Nagios commands to.')
    parser.add_option('-l', '--log-file', dest='logfile', metavar='FILE',
            default='/var/log/nagios3/nagios.log', help='The file Nagios writes '
            'log events to.')
    parser.add_option('-p', '--port', dest='port', metavar='PORT', type='int',
            default=6315, help='The port to listen for requests on.')
    parser.add_option('-q', '--quiet', dest='quiet', action='store_true',
            help='Quiet mode')
    (options, args) = parser.parse_args(args=argv[1:])

    if not os.path.isfile(options.statusfile):
        parser.error('Status file not found: %s' % options.statusfile)
    if not os.path.exists(options.commandfile):
        parser.error('Command file not found: %s' % options.commandfile)
    if options.port < 0 or options.port > 65535:
        parser.error('Port must be in the range 1..65535.')

    if options.quiet:
        LOG = glog.sublog('nagios-api', glog.warning)
    else:
        LOG = glog.sublog('nagios-api', glog.info)

    CMDFILE = options.commandfile

    info('Listening on port %d, starting to rock and roll!' % options.port)
    app.add_service(Service(http.HttpServer(http_handler), options.port))
    app.add_loop(Loop(read_status, options.statusfile), keep_alive=True)
    app.add_loop(Loop(read_log, options.logfile), keep_alive=True)
    app.run()
    return 1


def critical(msg):
    '''Handle error messaging.

    '''
    global LOG
    LOG.critical(msg)
    return 1


def info(msg):
    '''Print an informative logging message.

    '''
    global LOG
    LOG.info(msg)
    return 0


def warn(msg):
    '''Print a warning message.

    '''
    global LOG
    LOG.warn(msg)
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
